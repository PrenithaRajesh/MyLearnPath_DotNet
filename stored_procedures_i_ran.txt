USE DotNetCourseDatabase;
GO

ALTER PROCEDURE TutorialAppSchema.spUsers_Get
-- EXEC TutorialAppSchema.spUsers_Get @Active=1
@UserId INT = NULL, 
@Active BIT = NULL
AS 
BEGIN
    DROP TABLE IF EXISTS #AverageDeptSalary;

    SELECT UserJobInfo.Department, AVG(UserSalary.Salary) AS AvgSalary
    INTO #AverageDeptSalary
    FROM TutorialAppSchema.UserSalary AS UserSalary
    LEFT JOIN TutorialAppSchema.UserJobInfo AS UserJobInfo
        ON UserSalary.UserId = UserJobInfo.UserId
    GROUP BY UserJobInfo.Department;

    CREATE CLUSTERED INDEX cix_AverageDeptSalary_Department ON #AverageDeptSalary(Department);

    SELECT [Users].[UserId],
        [Users].[FirstName],
        [Users].[LastName],
        [Users].[Email],
        [Users].[Gender],
        [Users].[Active],
        [UserJobInfo].[Department],
        [UserJobInfo].[JobTitle],
        [UserSalary].[Salary],
        [AvgSalary].[AvgSalary]
    FROM TutorialAppSchema.Users AS Users
    LEFT JOIN TutorialAppSchema.UserJobInfo AS UserJobInfo
        ON Users.UserId = UserJobInfo.UserId
    LEFT JOIN TutorialAppSchema.UserSalary AS UserSalary
        On Users.UserId = UserSalary.UserId
    LEFT JOIN #AverageDeptSalary AS AvgSalary
        ON AvgSalary.Department = UserJobInfo.Department
    -- OUTER APPLY (
    --     SELECT AVG(UserSalary2.Salary) AS AvgSalary
    --     FROM TutorialAppSchema.UserSalary AS UserSalary2
    --     LEFT JOIN TutorialAppSchema.UserJobInfo AS UserJobInfo2
    --         ON UserSalary2.UserId = UserJobInfo2.UserId
    --     WHERE UserJobInfo.Department = UserJobInfo2.Department
    --     GROUP BY UserJobInfo2.Department
    -- ) AS AvgSalary
    WHERE Users.UserId = ISNULL(@UserId, Users.UserId) 
        AND ISNULL(Users.Active, 0) = COALESCE(@Active, Users.Active, 0)
END

__________________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE OR ALTER PROCEDURE TutorialAppSchema.spUsers_Upsert
    @FirstName NVARCHAR(50),
    @LastName NVARCHAR(50),
    @Email NVARCHAR(50),
    @Gender NVARCHAR(50),
    @JobTitle NVARCHAR(50),
    @Department NVARCHAR(50),
    @Salary DECIMAL(18,4),
    @Active BIT = 1,
    @UserId INT = NULL
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM TutorialAppSchema.Users WHERE UserId = @UserId)
        BEGIN
        IF NOT EXISTS (SELECT * FROM TutorialAppSchema.Users WHERE Email = @Email)
            BEGIN
                DECLARE @OutputUserId INT
                INSERT INTO TutorialAppSchema.Users([FirstName],[LastName],[Email],[Gender],[Active]) 
                    VALUES(@FirstName,@LastName,@Email,@Gender,@Active)
                
                SET @OutputUserId = @@IDENTITY

                INSERT INTO TutorialAppSchema.UserSalary(UserId, Salary) VALUES(@OutputUserId,@Salary);

                INSERT INTO TutorialAppSchema.UserJobInfo(UserId, Department, Jobtitle) VALUES(@OutputUserId,@Department, @JobTitle);

            END 
        END
    ELSE
        BEGIN
            UPDATE TutorialAppSchema.Users
                SET FirstName=@FirstName,LastName=@LastName,Email=@Email,Gender=@Gender,Active=@Active
                WHERE UserId=@UserId
            
            UPDATE TutorialAppSchema.UserSalary
                SET Salary = @Salary
                WHERE UserId=@UserId
            
            UPDATE TutorialAppSchema.UserJobInfo
                SET Department = @Department, JobTitle = @JobTitle
                WHERE UserId=@UserId
        END
END

_________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE PROCEDURE TutorialAppSchema.spUser_Delete
    @UserId INT 
AS
BEGIN
    DELETE FROM TutorialAppSchema.Users WHERE UserId = @UserId
    DELETE FROM TutorialAppSchema.UserSalary WHERE UserId = @UserId
    DELETE FROM TutorialAppSchema.UserJobInfo WHERE UserId = @UserId
END

_________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE OR ALTER PROCEDURE TutorialAppSchema.spPosts_Get
-- EXEC TutorialAppSchema.spPosts_Get @SearchVal = tests
@UserId INT = NULL,
@SearchVal NVARCHAR(MAX) = NULL,
@PostId INT = NULL
AS
BEGIN
    SELECT * FROM TutorialAppSchema.Posts AS Posts 
    WHERE UserId = ISNULL(@UserId,UserId) 
        AND PostId = ISNULL(@PostId, PostId)
        AND (@SearchVal IS NULL OR 
        PostContent LIKE '%'+ @SearchVal + '%' 
        OR PostTitle LIKE '%' + @SearchVal + '%') 

END
GO

_________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE OR ALTER PROCEDURE TutorialAppSchema.spPosts_Upsert
    @UserId INT,
    @PostTitle NVARCHAR(255),
    @PostContent NVARCHAR(MAX),
    @PostId INT = NULL
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM TutorialAppSchema.Posts WHERE PostId = @PostId)
        BEGIN
            INSERT INTO TutorialAppSchema.Posts([UserId],[PostTitle],[PostContent],[PostCreated],[PostUpdated]) 
                VALUES (@UserId, @PostTitle, @PostContent, GETDATE(), GETDATE())
        END
    ELSE
        BEGIN   
            UPDATE TutorialAppSchema.Posts
                SET PostTitle = @PostTitle, PostContent = @PostContent, PostUpdated = GETDATE()
                WHERE PostId = @PostId
        END
END

_________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE OR ALTER PROCEDURE TutorialAppSchema.spPost_Delete
    @PostId INT,
    @UserId INT
AS
BEGIN
    DELETE FROM TutorialAppSchema.Posts WHERE PostId = @PostId AND UserId = @UserId
END

_________________________________________________________

USE DotNetCourseDatabase;
GO

CREATE OR ALTER PROCEDURE TutorialAppSchema.spRegistration_Upsert
    @Email NVARCHAR(50),
    @PasswordHash VARBINARY(MAX),
    @PasswordSalt VARBINARY(MAX)
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM TutorialAppSchema.Auth WHERE Email = @Email)
        BEGIN
            INSERT INTO TutorialAppSchema.Auth(Email, PasswordHash, PasswordSalt) VALUES (@Email, @PasswordHash, @PasswordSalt);
        END
    ELSE
        BEGIN
            UPDATE TutorialAppSchema.Auth 
                SET PasswordHash = @PasswordHash, PasswordSalt = @PasswordSalt
                WHERE Email = @Email
        END
END

_________________________________________________________


CREATE OR ALTER PROCEDURE TutorialAppSchema.spLoginConfirmation_Get
    @Email NVARCHAR(50)
AS
BEGIN
    SELECT [PasswordHash],[PasswordSalt] FROM TutorialAppSchema.Auth 
    WHERE Email = @Email;
END